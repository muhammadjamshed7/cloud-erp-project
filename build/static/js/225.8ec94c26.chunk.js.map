{"version":3,"file":"static/js/225.8ec94c26.chunk.js","mappings":"0OAwBA,EAZoB,SAACA,GACnB,IAAMC,EAAWD,EAAMC,UAAY,KAEnC,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,MAAO,CAAEC,UAAW,SAAUJ,UACvCC,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,IAAW,eAAgBP,EAAMM,WAAWL,SACzDA,KAIT,ECHA,EARoB,SAACD,GACnB,IAAMC,EAAWD,EAAMC,UAAY,KAEnC,OACEC,EAAAA,EAAAA,KAAA,OAAKI,UAAWC,IAAW,aAAcP,EAAMM,WAAWL,SAAEA,GAEhE,E,qDCoFA,EAvFiB,WACf,IAAMO,EAAW,CACf,CACEC,GAAI,EACJC,OAAQC,EACRC,OAAQ,WACRC,KAAM,mCAER,CACEJ,GAAI,EACJC,OAAQI,EACRF,OAAQ,gBACRC,KAAM,0BAER,CACEJ,GAAI,EACJC,OAAQK,EACRH,OAAQ,WACRC,KAAM,2BAER,CACEJ,GAAI,EACJC,OAAQM,EACRJ,OAAQ,UACRC,KAAM,yBAER,CACEJ,GAAI,EACJC,OAAQO,EACRL,OAAQ,gBACRC,KAAM,0BAER,CACEJ,GAAI,EACJC,OAAQI,EACRF,OAAQ,gBACRC,KAAM,0BAER,CACEJ,GAAI,EACJC,OAAQK,EACRH,OAAQ,WACRC,KAAM,qBAGV,OACEX,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAAAjB,UACHkB,EAAAA,EAAAA,MAACD,EAAAA,EAAAA,KAAS,CAAAjB,SAAA,EACRkB,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACd,UAAU,YAAYe,MAAM,MAAKpB,SAAA,EACzCC,EAAAA,EAAAA,KAACkB,EAAAA,EAAAA,OAAe,CAACE,GAAG,IAAIhB,UAAU,2BAA0BL,UAC1DC,EAAAA,EAAAA,KAAA,KAAGI,UAAU,6BAEfa,EAAAA,EAAAA,MAACC,EAAAA,EAAAA,KAAa,CAAAnB,SAAA,EACZC,EAAAA,EAAAA,KAACkB,EAAAA,EAAAA,KAAa,CAAAnB,SAAC,cACfC,EAAAA,EAAAA,KAACkB,EAAAA,EAAAA,KAAa,CAAAnB,SAAC,kBAInBC,EAAAA,EAAAA,KAAA,MAAII,UAAU,oBAAmBL,SAAC,WAElCC,EAAAA,EAAAA,KAACqB,EAAW,CAAAtB,UACRO,GAAY,IAAIgB,KAAI,SAACC,EAASC,GAC9B,OACEP,EAAAA,EAAAA,MAACQ,EAAW,CAAA1B,SAAA,EACVC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,iBAAgBL,UAC7BC,EAAAA,EAAAA,KAAA,OAAK0B,IAAKH,EAAQf,OAAQJ,UAAU,iBAAiBuB,IAAI,QAE3D3B,EAAAA,EAAAA,KAAA,KAAGI,UAAU,oBAAmBL,SAAEwB,EAAQb,UAC1CV,EAAAA,EAAAA,KAAA,KAAGI,UAAU,kBAAiBL,SAAEwB,EAAQZ,QACxCX,EAAAA,EAAAA,KAAA,KAAGI,UAAU,kBAAiBL,UAC5BkB,EAAAA,EAAAA,MAACW,EAAAA,GAAI,CACHC,GAAG,IACHzB,UAAU,wCAAuCL,SAAA,CAEhD,IAAI,QACC,WAZMyB,EAiBtB,UAKV,C,+ECrDA,IA7BkB,SAAC1B,GACjB,OACEE,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAAA/B,UACFC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAG,CAAAhC,UACFkB,EAAAA,EAAAA,MAAA,OAAKb,UAAU,iBAAgBL,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mBAAkBL,UAC/BkB,EAAAA,EAAAA,MAACe,EAAAA,EAAU,CAAC5B,UAAU,MAAKL,SAAA,EACzBC,EAAAA,EAAAA,KAACgC,EAAAA,EAAAA,KAAe,CAACC,KAAK,IAAGlC,SAAC,WAExBD,EAAuB,iBAAK,IAAIwB,KAAI,SAACY,EAAMC,GAC3C,OAAOD,EAAKE,QACVpC,EAAAA,EAAAA,KAACgC,EAAAA,EAAAA,KAAe,CAACI,QAAM,EAAArC,SACpBmC,EAAKG,OADqBF,IAI7BnC,EAAAA,EAAAA,KAACgC,EAAAA,EAAAA,KAAe,CAAaC,KAAMC,EAAKI,KAAKvC,SAC1CmC,EAAKG,OADcF,EAI1B,UAGJnC,EAAAA,EAAAA,KAAA,MAAII,UAAU,aAAYL,SAAED,EAAa,cAKnD,C,8HCQA,EAzCqB,SAAHyC,GAQqB,IALrCC,EAAaD,EAAbC,cACAC,EAAQF,EAARE,SACA1C,EAAQwC,EAARxC,SACA2C,EAAQH,EAARG,SACAC,EAASJ,EAATI,UAKMC,GAAUC,EAAAA,EAAAA,IAAqB,CAAEL,cAAAA,EAAeC,SAAAA,IAEpDK,EAIEF,EAJFE,aACAC,EAGEH,EAHFG,SACAC,EAEEJ,EAFFI,QACaC,EACXL,EADFM,UAAaD,OAGf,OACEjD,EAAAA,EAAAA,KAAA,QAAM0C,SAAUI,EAAaJ,GAAWtC,UAAWuC,EAAWQ,YAAU,EAAApD,SACrEqD,MAAMC,QAAQtD,GACXA,EAASuB,KAAI,SAACgC,GACZ,OAAOA,EAAMxD,OAASwD,EAAMxD,MAAMyD,KAC9BC,EAAAA,cAAoBF,EAAMG,MAAIC,EAAAA,EAAAA,GAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEvBJ,EAAMxD,OAAK,IACdiD,SAAAA,EACAY,IAAKL,EAAMxD,MAAMyD,KACjBN,OAAAA,EACAD,QAAAA,MAGJM,CACN,IACAvD,GAGV,E,oNCjCM6D,EAAgB,SAAHrB,GAQQ,IAPzBgB,EAAIhB,EAAJgB,KACAM,EAAWtB,EAAXsB,YACAC,EAAWvB,EAAXuB,YACAb,EAAMV,EAANU,OAEAF,GADOR,EAAPS,QACQT,EAARQ,UACA3C,EAASmC,EAATnC,UAEA2D,GAAwCC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAEpC,OACEjE,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAAtE,UACEkB,EAAAA,EAAAA,MAACqD,EAAAA,EAAU,CAAClE,UAAU,OAAML,SAAA,EAC1BC,EAAAA,EAAAA,KAACuE,EAAAA,EAAAA,SAAYb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACXD,KAAMU,EAAe,OAAS,WAC9BN,YAAaA,EACbN,KAAMA,EACNhD,GAAIgD,EACJnC,GAAG,QACHoD,IAAK,SAACC,GACAX,GAAaA,EAAYW,EAC/B,EACArE,UAAWA,EACXsE,aAAWzB,IAAUA,EAAOM,KACvBR,EAAWA,EAASQ,GAAQ,CAAC,GAAC,IACnCoB,aAAcpB,MAEhBvD,EAAAA,EAAAA,KAAA,OACEI,UAAWC,IAAW,mBAAoB,uBAAwB,CAChE,gBAAiB8D,IAEnB,gBAAeA,EAAe,OAAS,QAAQpE,UAE/CC,EAAAA,EAAAA,KAAA,QACEI,UAAU,eACVwE,QAAS,WACPR,GAAiBD,EACnB,UAMZ,EA+IA,EA7HkB,SAAHU,GAeQ,IAdrBxC,EAAKwC,EAALxC,MACAoB,EAAIoB,EAAJpB,KACAF,EAAIsB,EAAJtB,KACAM,EAAWgB,EAAXhB,YACAd,EAAQ8B,EAAR9B,SACAE,EAAM4B,EAAN5B,OAEA7C,GADOyE,EAAP7B,QACS6B,EAATzE,WACA0E,EAAcD,EAAdC,eACAC,EAAcF,EAAdE,eACAjB,EAAWe,EAAXf,YACA/D,EAAQ8E,EAAR9E,SACAiF,EAAIH,EAAJG,KACGC,GAAUC,EAAAA,EAAAA,GAAAL,EAAAM,GAGPC,EACK,aAAT3B,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAEpE,OACEzD,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAAtE,SACY,WAAT0D,GACCzD,EAAAA,EAAAA,KAAA,SAAA0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACED,KAAMA,EACNF,KAAMA,GACDR,EAAWA,EAASQ,GAAQ,CAAC,GAC9B0B,KAGNjF,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAAtE,SACY,aAAT0D,GACCzD,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAAtE,UACEkB,EAAAA,EAAAA,MAACsD,EAAAA,EAAAA,MAAU,CAACnE,UAAW2E,EAAehF,SAAA,CACnCsC,GACCpB,EAAAA,EAAAA,MAAAoD,EAAAA,SAAA,CAAAtE,SAAA,CACG,KACDC,EAAAA,EAAAA,KAACuE,EAAAA,EAAAA,MAAU,CAACnE,UAAW0E,EAAe/E,SACnCsC,IACW,IACbtC,EAAU,OAEX,MACJC,EAAAA,EAAAA,KAAC4D,EAAa,CACZL,KAAMA,EACNM,YAAaA,EACbC,YAAaA,EACbb,OAAQA,EACRF,SAAUA,EACV3C,UAAWA,IAGZ6C,GAAUA,EAAOM,IAChBvD,EAAAA,EAAAA,KAACuE,EAAAA,EAAAA,QAAAA,SAAqB,CAACd,KAAK,UAAUrD,UAAU,UAASL,SACtDkD,EAAOM,GAAe,UAEvB,WAIRvD,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAAtE,SACY,aAAT0D,GAAgC,UAATA,GACtBzD,EAAAA,EAAAA,KAAAqE,EAAAA,SAAA,CAAAtE,UACEkB,EAAAA,EAAAA,MAACsD,EAAAA,EAAAA,MAAU,CAACnE,UAAW2E,EAAehF,SAAA,EACpCC,EAAAA,EAAAA,KAACuE,EAAAA,EAAAA,OAAUb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACTD,KAAMA,EACNpB,MAAOA,EACPkB,KAAMA,EACNhD,GAAIgD,EACJiB,IAAK,SAACC,GACAX,GAAaA,EAAYW,EAC/B,EACArE,UAAWA,EACXsE,aAAWzB,IAAUA,EAAOM,KACvBR,EAAWA,EAASQ,GAAQ,CAAC,GAC9B0B,IAGLhC,GAAUA,EAAOM,IAChBvD,EAAAA,EAAAA,KAACuE,EAAAA,EAAAA,QAAAA,SAAqB,CAACd,KAAK,UAAS1D,SAClCkD,EAAOM,GAAe,UAEvB,WAIRtC,EAAAA,EAAAA,MAACsD,EAAAA,EAAAA,MAAU,CAACnE,UAAW2E,EAAehF,SAAA,CACnCsC,GACCrC,EAAAA,EAAAA,KAACuE,EAAAA,EAAAA,MAAU,CAACnE,UAAW0E,EAAe/E,SAAEsC,IACtC,MAEJrC,EAAAA,EAAAA,KAACuE,EAAAA,EAAAA,SAAYb,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACXD,KAAMA,EACNI,YAAaA,EACbN,KAAMA,EACNhD,GAAIgD,EACJnC,GAAIgE,EACJZ,IAAK,SAACC,GACAX,GAAaA,EAAYW,EAC/B,EACArE,UAAWA,EACXsE,aAAWzB,IAAUA,EAAOM,KACvBR,EAAWA,EAASQ,GAAQ,CAAC,GAAC,IACnCyB,KAAMA,GACFC,GAAU,IACdN,aAAcpB,EAAKxD,SAElBA,GAAsB,QAGxBkD,GAAUA,EAAOM,IAChBvD,EAAAA,EAAAA,KAACuE,EAAAA,EAAAA,QAAAA,SAAqB,CAACd,KAAK,UAAS1D,SAClCkD,EAAOM,GAAe,UAEvB,aAStB,C","sources":["components/MessageList.tsx","components/MessageItem.tsx","components/Messages.tsx","components/PageTitle.tsx","components/VerticalForm.tsx","components/FormInput.tsx"],"sourcesContent":["import React from \"react\";\nimport SimpleBar from \"simplebar-react\";\nimport classNames from \"classnames\";\n\ninterface MessageListProps {\n  className?: string;\n  children?: Object;\n}\n\n/**\n * MessageList\n */\nconst MessageList = (props: MessageListProps) => {\n  const children = props.children || null;\n\n  return (\n    <SimpleBar style={{ maxHeight: \"407px\" }}>\n      <div className={classNames(\"inbox-widget\", props.className)}>\n        {children}\n      </div>\n    </SimpleBar>\n  );\n};\n\nexport default MessageList;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface MessageItemProps {\n  className?: string;\n  children?: any;\n}\n\n/**\n * MessageItem\n */\nconst MessageItem = (props: MessageItemProps) => {\n  const children = props.children || null;\n\n  return (\n    <div className={classNames(\"inbox-item\", props.className)}>{children}</div>\n  );\n};\n\nexport default MessageItem;\n","import React from \"react\";\nimport { Card, Dropdown } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\n//components\nimport MessageList from \"./MessageList\";\nimport MessageItem from \"./MessageItem\";\n\nimport profileImg from \"../assets/images/users/user-2.jpg\";\nimport avatar1 from \"../assets/images/users/user-3.jpg\";\nimport avatar2 from \"../assets/images/users/user-4.jpg\";\nimport avatar3 from \"../assets/images/users/user-5.jpg\";\nimport avatar6 from \"../assets/images/users/user-6.jpg\";\n\nconst Messages = () => {\n  const messages = [\n    {\n      id: 1,\n      avatar: profileImg,\n      sender: \"Tomaslau\",\n      text: \"I've finished it! See you so...\",\n    },\n    {\n      id: 2,\n      avatar: avatar1,\n      sender: \"Stillnotdavid\",\n      text: \"This theme is awesome!\",\n    },\n    {\n      id: 3,\n      avatar: avatar2,\n      sender: \"Kurafire\",\n      text: \"Hyper is awesome theme!\",\n    },\n    {\n      id: 4,\n      avatar: avatar3,\n      sender: \"Shahedk\",\n      text: \"This theme is awesome\",\n    },\n    {\n      id: 5,\n      avatar: avatar6,\n      sender: \"Adhamdannaway\",\n      text: \"Ubold theme is awesome\",\n    },\n    {\n      id: 6,\n      avatar: avatar1,\n      sender: \"Stillnotdavid\",\n      text: \"This theme is awesome!\",\n    },\n    {\n      id: 7,\n      avatar: avatar2,\n      sender: \"Kurafire\",\n      text: \"Nice to meet you\",\n    },\n  ];\n  return (\n    <Card>\n      <Card.Body>\n        <Dropdown className=\"float-end\" align=\"end\">\n          <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n            <i className=\"mdi mdi-dots-vertical\"></i>\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item>Settings</Dropdown.Item>\n            <Dropdown.Item>Action</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n\n        <h4 className=\"header-title mb-3\">Inbox</h4>\n\n        <MessageList>\n          {(messages || []).map((message, i) => {\n            return (\n              <MessageItem key={i}>\n                <div className=\"inbox-item-img\">\n                  <img src={message.avatar} className=\"rounded-circle\" alt=\"\" />\n                </div>\n                <p className=\"inbox-item-author\">{message.sender}</p>\n                <p className=\"inbox-item-text\">{message.text}</p>\n                <p className=\"inbox-item-date\">\n                  <Link\n                    to=\"#\"\n                    className=\"btn btn-sm btn-link text-info font-13\"\n                  >\n                    {\" \"}\n                    Reply{\" \"}\n                  </Link>\n                </p>\n              </MessageItem>\n            );\n          })}\n        </MessageList>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default Messages;\n","import React from \"react\";\nimport { Row, Col, Breadcrumb } from \"react-bootstrap\";\n\ninterface BreadcrumbItems {\n  label: string;\n  path: string;\n  active?: boolean;\n}\n\ninterface PageTitleProps {\n  breadCrumbItems: Array<BreadcrumbItems>;\n  title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n  return (\n    <Row>\n      <Col>\n        <div className=\"page-title-box\">\n          <div className=\"page-title-right\">\n            <Breadcrumb className=\"m-0\">\n              <Breadcrumb.Item href=\"/\">UBold</Breadcrumb.Item>\n\n              {(props[\"breadCrumbItems\"] || []).map((item, index) => {\n                return item.active ? (\n                  <Breadcrumb.Item active key={index}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                ) : (\n                  <Breadcrumb.Item key={index} href={item.path}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                );\n              })}\n            </Breadcrumb>\n          </div>\n          <h4 className=\"page-title\">{props[\"title\"]}</h4>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PageTitle;\n","import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { useState, InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface PasswordInputProps {\n  name: string;\n  placeholder?: string;\n  refCallback?: any;\n  errors: FieldErrors;\n  control?: Control<any>;\n  register?: any;\n  className?: string;\n}\n\n/* Password Input */\nconst PasswordInput = ({\n  name,\n  placeholder,\n  refCallback,\n  errors,\n  control,\n  register,\n  className,\n}: PasswordInputProps) => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  return (\n    <>\n      <InputGroup className=\"mb-0\">\n        <Form.Control\n          type={showPassword ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          name={name}\n          id={name}\n          as=\"input\"\n          ref={(r: HTMLInputElement) => {\n            if (refCallback) refCallback(r);\n          }}\n          className={className}\n          isInvalid={errors && errors[name] ? true : false}\n          {...(register ? register(name) : {})}\n          autoComplete={name}\n        />\n        <div\n          className={classNames(\"input-group-text\", \"input-group-password\", {\n            \"show-password\": showPassword,\n          })}\n          data-password={showPassword ? \"true\" : \"false\"}\n        >\n          <span\n            className=\"password-eye\"\n            onClick={() => {\n              setShowPassword(!showPassword);\n            }}\n          ></span>\n        </div>\n      </InputGroup>\n    </>\n  );\n};\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  type?: string;\n  name: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  refCallback?: any;\n  children?: any;\n  rows?: string;\n}\n\nconst FormInput = ({\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  refCallback,\n  children,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"password\" ? (\n            <>\n              <Form.Group className={containerClass}>\n                {label ? (\n                  <>\n                    {\" \"}\n                    <Form.Label className={labelClassName}>\n                      {label}\n                    </Form.Label>{\" \"}\n                    {children}{\" \"}\n                  </>\n                ) : null}\n                <PasswordInput\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors!}\n                  register={register}\n                  className={className}\n                />\n\n                {errors && errors[name] ? (\n                  <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name][\"message\"]}\n                  </Form.Control.Feedback>\n                ) : null}\n              </Form.Group>\n            </>\n          ) : (\n            <>\n              {type === \"checkbox\" || type === \"radio\" ? (\n                <>\n                  <Form.Group className={containerClass}>\n                    <Form.Check\n                      type={type}\n                      label={label}\n                      name={name}\n                      id={name}\n                      ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                      }}\n                      className={className}\n                      isInvalid={errors && errors[name] ? true : false}\n                      {...(register ? register(name) : {})}\n                      {...otherProps}\n                    />\n\n                    {errors && errors[name] ? (\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors[name][\"message\"]}\n                      </Form.Control.Feedback>\n                    ) : null}\n                  </Form.Group>\n                </>\n              ) : (\n                <Form.Group className={containerClass}>\n                  {label ? (\n                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                  ) : null}\n\n                  <Form.Control\n                    type={type}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as={comp}\n                    ref={(r: HTMLInputElement) => {\n                      if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    rows={rows}\n                    {...otherProps}\n                    autoComplete={name}\n                  >\n                    {children ? children : null}\n                  </Form.Control>\n\n                  {errors && errors[name] ? (\n                    <Form.Control.Feedback type=\"invalid\">\n                      {errors[name][\"message\"]}\n                    </Form.Control.Feedback>\n                  ) : null}\n                </Form.Group>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n"],"names":["props","children","_jsx","SimpleBar","style","maxHeight","className","classNames","messages","id","avatar","profileImg","sender","text","avatar1","avatar2","avatar3","avatar6","Card","_jsxs","Dropdown","align","as","MessageList","map","message","i","MessageItem","src","alt","Link","to","Row","Col","Breadcrumb","href","item","index","active","label","path","_ref","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","child","name","React","type","_objectSpread","key","PasswordInput","placeholder","refCallback","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_Fragment","InputGroup","Form","ref","r","isInvalid","autoComplete","onClick","_ref2","labelClassName","containerClass","rows","otherProps","_objectWithoutProperties","_excluded","comp"],"sourceRoot":""}