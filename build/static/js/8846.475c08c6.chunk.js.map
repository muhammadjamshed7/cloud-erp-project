{"version":3,"file":"static/js/8846.475c08c6.chunk.js","mappings":"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","sources":["components/VerticalForm.tsx","components/FormInput.tsx","pages/apps/Chat/data.tsx","pages/apps/Chat/ChatUsers.tsx","pages/apps/Chat/ChatArea.tsx","pages/apps/Chat/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { useState, InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface PasswordInputProps {\n  name: string;\n  placeholder?: string;\n  refCallback?: any;\n  errors: FieldErrors;\n  control?: Control<any>;\n  register?: any;\n  className?: string;\n}\n\n/* Password Input */\nconst PasswordInput = ({\n  name,\n  placeholder,\n  refCallback,\n  errors,\n  control,\n  register,\n  className,\n}: PasswordInputProps) => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  return (\n    <>\n      <InputGroup className=\"mb-0\">\n        <Form.Control\n          type={showPassword ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          name={name}\n          id={name}\n          as=\"input\"\n          ref={(r: HTMLInputElement) => {\n            if (refCallback) refCallback(r);\n          }}\n          className={className}\n          isInvalid={errors && errors[name] ? true : false}\n          {...(register ? register(name) : {})}\n          autoComplete={name}\n        />\n        <div\n          className={classNames(\"input-group-text\", \"input-group-password\", {\n            \"show-password\": showPassword,\n          })}\n          data-password={showPassword ? \"true\" : \"false\"}\n        >\n          <span\n            className=\"password-eye\"\n            onClick={() => {\n              setShowPassword(!showPassword);\n            }}\n          ></span>\n        </div>\n      </InputGroup>\n    </>\n  );\n};\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  type?: string;\n  name: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  refCallback?: any;\n  children?: any;\n  rows?: string;\n}\n\nconst FormInput = ({\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  refCallback,\n  children,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"password\" ? (\n            <>\n              <Form.Group className={containerClass}>\n                {label ? (\n                  <>\n                    {\" \"}\n                    <Form.Label className={labelClassName}>\n                      {label}\n                    </Form.Label>{\" \"}\n                    {children}{\" \"}\n                  </>\n                ) : null}\n                <PasswordInput\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors!}\n                  register={register}\n                  className={className}\n                />\n\n                {errors && errors[name] ? (\n                  <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name][\"message\"]}\n                  </Form.Control.Feedback>\n                ) : null}\n              </Form.Group>\n            </>\n          ) : (\n            <>\n              {type === \"checkbox\" || type === \"radio\" ? (\n                <>\n                  <Form.Group className={containerClass}>\n                    <Form.Check\n                      type={type}\n                      label={label}\n                      name={name}\n                      id={name}\n                      ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                      }}\n                      className={className}\n                      isInvalid={errors && errors[name] ? true : false}\n                      {...(register ? register(name) : {})}\n                      {...otherProps}\n                    />\n\n                    {errors && errors[name] ? (\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors[name][\"message\"]}\n                      </Form.Control.Feedback>\n                    ) : null}\n                  </Form.Group>\n                </>\n              ) : (\n                <Form.Group className={containerClass}>\n                  {label ? (\n                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                  ) : null}\n\n                  <Form.Control\n                    type={type}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as={comp}\n                    ref={(r: HTMLInputElement) => {\n                      if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    rows={rows}\n                    {...otherProps}\n                    autoComplete={name}\n                  >\n                    {children ? children : null}\n                  </Form.Control>\n\n                  {errors && errors[name] ? (\n                    <Form.Control.Feedback type=\"invalid\">\n                      {errors[name][\"message\"]}\n                    </Form.Control.Feedback>\n                  ) : null}\n                </Form.Group>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import avatar1 from \"../../../assets/images/users/user-1.jpg\";\nimport avatar2 from \"../../../assets/images/users/user-2.jpg\";\nimport avatar3 from \"../../../assets/images/users/user-3.jpg\";\nimport avatar4 from \"../../../assets/images/users/user-4.jpg\";\nimport avatar5 from \"../../../assets/images/users/user-5.jpg\";\nimport avatar6 from \"../../../assets/images/users/user-6.jpg\";\nimport avatar7 from \"../../../assets/images/users/user-7.jpg\";\nimport avatar8 from \"../../../assets/images/users/user-8.jpg\";\nimport avatar9 from \"../../../assets/images/users/user-9.jpg\";\n\nexport interface ChatUser {\n  id?: number;\n  name?: string;\n  avatar?: string;\n  lastMessage?: string;\n  totalUnread?: number;\n  lastMessageOn?: string;\n  email?: string;\n  phone?: string;\n  location?: string;\n  languages?: string;\n  groups: string;\n}\n\nexport interface ChatMessage {\n  id: number;\n  from: ChatUser;\n  to: ChatUser;\n  message: {\n    type: string;\n    value: any;\n  };\n  sendOn?: string;\n}\n\nconst users: ChatUser[] = [\n  {\n    id: 1,\n    name: \"Brandon Smith\",\n    avatar: avatar2,\n    lastMessage: \"How are you today?\",\n    totalUnread: 3,\n    lastMessageOn: \"4:30am\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"California, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Favourties\",\n  },\n  {\n    id: 2,\n    name: \"Maria C\",\n    avatar: avatar5,\n    lastMessage: \"Hey! a reminder for tomorrow's meeting?\",\n    totalUnread: 0,\n    lastMessageOn: \"5:30am\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New York, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n  {\n    id: 3,\n    name: \"Dominic A\",\n    avatar: avatar4,\n    lastMessage: \"Are we going to have this week's planning meeting?\",\n    totalUnread: 2,\n    lastMessageOn: \"Thu\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New Jersey, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Favourties\",\n  },\n  {\n    id: 4,\n    name: \"Ronda D\",\n    avatar: avatar9,\n    lastMessage: \"Please check these design assets..\",\n    totalUnread: 0,\n    lastMessageOn: \"Wed\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"California, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n  {\n    id: 5,\n    name: \"Michael H\",\n    avatar: avatar6,\n    lastMessage: \"Are you free for 15 mins? I would like to discuss something\",\n    totalUnread: 6,\n    lastMessageOn: \"Tue\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New York, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n  {\n    id: 6,\n    name: \"Thomas R\",\n    avatar: avatar7,\n    lastMessage: \"Let's have meeting today between me, you and Tony...\",\n    totalUnread: 0,\n    lastMessageOn: \"Tue\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New Jersey, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n  {\n    id: 7,\n    name: \"Thomas J\",\n    avatar: avatar8,\n    lastMessage: \"Howdy?\",\n    totalUnread: 0,\n    lastMessageOn: \"Tue\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New York, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Favourties\",\n  },\n  {\n    id: 8,\n    name: \"Rikcy J\",\n    avatar: avatar3,\n    lastMessage: \"Are you interested in learning?\",\n    totalUnread: 28,\n    lastMessageOn: \"Mon\",\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"New Jersey, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  },\n];\n\nconst messages: ChatMessage[] = [];\n\nconst defaultTo = {\n  id: 9,\n  name: \"Geneva M\",\n  avatar: avatar1,\n  email: \"support@coderthemes.com\",\n  phone: \"+1 456 9595 9594\",\n  location: \"California, USA\",\n  languages: \"English, German, Spanish\",\n  groups: \"Work, Friends\",\n};\n\nfor (const user of users) {\n  messages.push(\n    {\n      id: 1,\n      message: {\n        type: \"text\",\n        value: \"Hello!\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:00\",\n    },\n    {\n      id: 2,\n      message: {\n        type: \"text\",\n        value: \"Hi, How are you? What about our next meeting?\",\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:01\",\n    },\n    {\n      id: 3,\n      message: {\n        type: \"text\",\n        value: \"Yeah everything is fine\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:01\",\n    },\n    {\n      id: 4,\n      message: {\n        type: \"text\",\n        value: \"Awesome!\",\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:02\",\n    },\n    {\n      id: 5,\n      message: {\n        type: \"text\",\n        value: \"Let's have it today if you are free\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:03\",\n    },\n    {\n      id: 6,\n      message: {\n        type: \"text\",\n        value: \"Sure thing! let me know if 2pm works for you\",\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:03\",\n    },\n    {\n      id: 7,\n      message: {\n        type: \"text\",\n        value:\n          \"Sorry, I have another meeting scheduled at 2pm. Can we have it at 3pm instead?\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:04\",\n    },\n    {\n      id: 8,\n      message: {\n        type: \"text\",\n        value:\n          \"We can also discuss about the presentation talk format if you have some extra mins\",\n      },\n      to: defaultTo,\n      from: user,\n      sendOn: \"10:04\",\n    },\n    {\n      id: 9,\n      message: {\n        type: \"text\",\n        value:\n          \"3pm it is. Sure, let's discuss about presentation format, it would be great to finalize today. I am attaching the last year format and assets here..\",\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:05\",\n    },\n    {\n      id: 10,\n      message: {\n        type: \"file\",\n        value: {\n          file: \"UBold-sketch.zip\",\n          size: \"2.3MB\",\n        },\n      },\n      to: user,\n      from: defaultTo,\n      sendOn: \"10:05\",\n    }\n  );\n}\n\nexport { users, messages };\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport classnames from \"classnames\";\nimport SimpleBar from \"simplebar-react\";\n\n// dummy data\nimport { users, ChatUser } from \"./data\";\n\nimport profilePic from \"../../../assets/images/users/user-1.jpg\";\n\ninterface ChatUsersProps {\n  onUserSelect: (value: ChatUser) => void;\n}\n\n// ChatUsers\nconst ChatUsers = ({ onUserSelect }: ChatUsersProps) => {\n  const [user, setUser] = useState<ChatUser[]>([...users]);\n  const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n  /**\n   * Search the user\n   * @param {*} text\n   */\n  const search = (text: string) => {\n    setUser(\n      text\n        ? [...users].filter(\n            (u) => u.name!.toLowerCase().indexOf(text.toLowerCase()) >= 0\n          )\n        : [...users]\n    );\n  };\n\n  /**\n   * Activates the user\n   * @param {*} user\n   */\n  const activateUser = (user: ChatUser) => {\n    setSelectedUser(user);\n    if (onUserSelect) {\n      onUserSelect(user);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <div className=\"d-flex align-items-start mb-3\">\n            <img\n              src={profilePic}\n              className=\"me-2 rounded-circle\"\n              height=\"42\"\n              alt=\"\"\n            />\n            <div className=\"w-100\">\n              <h5 className=\"mt-0 mb-0 font-15\">\n                <Link to=\"#\" className=\"text-reset\">\n                  Geneva McKnight\n                </Link>\n              </h5>\n              <p className=\"mt-1 mb-0 text-muted font-14\">\n                <small className=\"mdi mdi-circle text-success\"></small> Online\n              </p>\n            </div>\n            <Link to=\"#\" className=\"text-reset font-20\">\n              <i className=\"mdi mdi-cog-outline\"></i>\n            </Link>\n          </div>\n\n          <form className=\"search-bar mb-3\">\n            <div className=\"position-relative\">\n              <input\n                type=\"text\"\n                className=\"form-control form-control-light\"\n                placeholder=\"People, groups & messages...\"\n                onKeyUp={(e: any) => search(e.target.value)}\n              />\n              <span className=\"mdi mdi-magnify\"></span>\n            </div>\n          </form>\n\n          <h6 className=\"font-13 text-muted text-uppercase\">Group Chats</h6>\n          <div className=\"p-2\">\n            <Link to=\"#\" className=\"text-reset mb-2 d-block\">\n              <i className=\"mdi mdi-checkbox-blank-circle-outline me-1 text-success\"></i>\n              <span className=\"mb-0 mt-1\">App Development</span>\n            </Link>\n\n            <Link to=\"#\" className=\"text-reset mb-2 d-block\">\n              <i className=\"mdi mdi-checkbox-blank-circle-outline me-1 text-warning\"></i>\n              <span className=\"mb-0 mt-1\">Office Work</span>\n            </Link>\n          </div>\n\n          <h6 className=\"font-13 text-muted text-uppercase\">Contacts</h6>\n          <Row>\n            <Col>\n              <SimpleBar style={{ height: \"375px\", width: \"100%\" }}>\n                {(user || []).map((user, index) => {\n                  return (\n                    <Link\n                      to=\"#\"\n                      key={index}\n                      className=\"text-body\"\n                      onClick={(e: any) => {\n                        activateUser(user);\n                      }}\n                    >\n                      <div\n                        className={classnames(\n                          \"d-flex\",\n                          \"align-items-start\",\n                          \"p-2\",\n                          {\n                            \"bg-light\": user.id === selectedUser.id,\n                          }\n                        )}\n                      >\n                        <img\n                          src={user.avatar}\n                          className=\"me-2 rounded-circle\"\n                          height=\"42\"\n                          alt=\"\"\n                        />\n\n                        <div className=\"w-100\">\n                          <h5 className=\"mt-0 mb-0 font-14\">\n                            <span className=\"float-end text-muted fw-normal font-12\">\n                              {user.lastMessageOn}\n                            </span>\n                            {user.name}\n                          </h5>\n                          <p className=\"mt-1 mb-0 text-muted font-14\">\n                            <span className=\"w-25 float-end text-end\">\n                              {user.totalUnread !== 0 && (\n                                <span className=\"badge badge-soft-danger\">\n                                  {user.totalUnread}\n                                </span>\n                              )}\n                            </span>\n                            <span className=\"w-75\">{user.lastMessage}</span>\n                          </p>\n                        </div>\n                      </div>\n                    </Link>\n                  );\n                })}\n              </SimpleBar>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default ChatUsers;\n","import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Card,\n  Dropdown,\n  Row,\n  Col,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport classnames from \"classnames\";\nimport SimpleBar from \"simplebar-react\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\n// components\nimport { FormInput } from \"../../../components/\";\nimport Loader from \"../../../components/Loader\";\n\n// default data\nimport { messages, ChatMessage, ChatUser } from \"./data\";\n\nimport avatar1 from \"../../../assets/images/users/user-1.jpg\";\n\nconst UserMessage = ({\n  message,\n  toUser,\n}: {\n  message: ChatMessage;\n  toUser: ChatUser;\n}) => {\n  return (\n    <li className={classnames(\"clearfix\", { odd: message.from.id === toUser.id })} >\n      <div className=\"chat-avatar\">\n        <img src={message.from.avatar} className=\"rounded\" alt=\"\" />\n        <i>{message.sendOn}</i>\n      </div>\n\n      <div className=\"conversation-text\">\n        {message.message.type === \"text\" && (\n          <div className=\"ctext-wrap\">\n            <i>{message.from.name}</i>\n            {message.message.type === \"text\" && <p>{message.message.value}</p>}\n          </div>\n        )}\n        {message.message.type === \"file\" && (\n          <Card className=\"mt-2 mb-1 shadow-none border text-start\">\n            <div className=\"p-2\">\n              <Row className=\"align-items-center\">\n                <Col className=\"col-auto\">\n                  <div className=\"avatar-sm\">\n                    <span className=\"avatar-title bg-primary rounded\">\n                      .ZIP\n                    </span>\n                  </div>\n                </Col>\n                <Col className=\"ps-0\">\n                  <Link to=\"#\" className=\"text-muted fw-bold\">\n                    {message.message.value.file}\n                  </Link>\n                  <p className=\"mb-0\">{message.message.value.size}</p>\n                </Col>\n                <Col className=\"col-auto\">\n                  <Link to=\"#\" className=\"btn btn-link btn-lg text-muted\">\n                    <i className=\"dripicons-download\"></i>\n                  </Link>\n                </Col>\n              </Row>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      <Dropdown\n        className=\"conversation-actions\"\n        align={message.from.id === toUser.id ? \"start\" : \"end\"}\n      >\n        <Dropdown.Toggle as=\"a\" className=\"btn-sm card-drop cursor-pointer\">\n          <i className=\"mdi mdi-dots-vertical font-16\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item>Copy Message</Dropdown.Item>\n          <Dropdown.Item>Edit</Dropdown.Item>\n          <Dropdown.Item>Delete</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </li>\n  );\n};\n\ninterface ChatAreaProps {\n  selectedUser: ChatUser;\n}\n\n// ChatArea\nconst ChatArea = ({ selectedUser }: ChatAreaProps) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [userMessages, setUserMessages] = useState<ChatMessage[]>([]);\n\n  const [toUser] = useState<ChatUser>({\n    id: 9,\n    name: \"Geneva M\",\n    avatar: avatar1,\n    email: \"support@coderthemes.com\",\n    phone: \"+1 456 9595 9594\",\n    location: \"California, USA\",\n    languages: \"English, German, Spanish\",\n    groups: \"Work, Friends\",\n  });\n\n  /*\n   *  Fetches the messages for selected user\n   */\n  const getMessagesForUser = useCallback(() => {\n    if (selectedUser) {\n      setLoading(true);\n      setTimeout(() => {\n        setUserMessages(\n          [...messages].filter(\n            (m) =>\n              (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n              (toUser.id === m.from.id && m.to.id === selectedUser.id)\n          )\n        );\n        setLoading(false);\n      }, 750);\n    }\n  }, [selectedUser, toUser]);\n\n  useEffect(() => {\n    getMessagesForUser();\n  }, [getMessagesForUser]);\n\n  /*\n   * form validation schema\n   */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      newMessage: yup.string().required(\"Please enter your messsage\"),\n    })\n  );\n\n  /*\n   * form methods\n   */\n  const methods = useForm({ resolver: schemaResolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    reset,\n  } = methods;\n\n  /**\n   * sends the chat message\n   */\n  const sendChatMessage = async (values: { newMessage: string }) => {\n    let newUserMessages = [...userMessages];\n    newUserMessages.push({\n      id: userMessages.length + 1,\n      from: toUser,\n      to: selectedUser,\n      message: { type: \"text\", value: values[\"newMessage\"] },\n      sendOn: new Date().getHours() + \":\" + new Date().getMinutes(),\n    });\n    setTimeout(() => {\n      let otherNewMessages = [...newUserMessages]\n      otherNewMessages.push({\n        id: userMessages.length + 1,\n        from: selectedUser,\n        to: toUser,\n        message: { type: \"text\", value: values[\"newMessage\"] },\n        sendOn: new Date().getHours() + \":\" + new Date().getMinutes(),\n      })\n      setUserMessages(otherNewMessages);\n    }, 1000);\n    setUserMessages(newUserMessages);\n    reset();\n  };\n\n  const AlwaysScrollToBottom = () => {\n    const elementRef = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n      if (elementRef && elementRef.current && elementRef.current.scrollIntoView) {\n        elementRef.current.scrollIntoView({behavior:'smooth'})\n      }\n    })\n    return <div ref={elementRef} />\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body className=\"py-2 px-3 border-bottom border-light\">\n          <Row className=\"justify-content-between py-1\">\n            <Col sm={7}>\n              <div className=\"d-flex align-items-start\">\n                <img\n                  src={selectedUser.avatar}\n                  className=\"me-2 rounded-circle\"\n                  height=\"36\"\n                  alt=\"Brandon Smith\"\n                />\n                <div>\n                  <h5 className=\"mt-0 mb-0 font-15\">\n                    <Link to=\"/apps/contacts/profile\" className=\"text-reset\">\n                      {selectedUser.name}\n                    </Link>\n                  </h5>\n                  <p className=\"mt-1 mb-0 text-muted font-12\">\n                    <small className=\"mdi mdi-circle text-success\"></small>{\" \"}\n                    Online\n                  </p>\n                </div>\n              </div>\n            </Col>\n            <Col className=\"col-auto\">\n              <div id=\"tooltips-container\">\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip id=\"\">Voice Call</Tooltip>}\n                >\n                  <Link\n                    to=\"#\"\n                    className=\"text-reset font-19 py-1 px-2 d-inline-block\"\n                  >\n                    <i className=\"fe-phone-call\"></i>\n                  </Link>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip id=\"\">Video Call</Tooltip>}\n                >\n                  <Link\n                    to=\"#\"\n                    className=\"text-reset font-19 py-1 px-2 d-inline-block\"\n                  >\n                    <i className=\"fe-video\"></i>\n                  </Link>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip id=\"\">Add Users</Tooltip>}\n                >\n                  <Link\n                    to=\"#\"\n                    className=\"text-reset font-19 py-1 px-2 d-inline-block\"\n                  >\n                    <i className=\"fe-user-plus\"></i>\n                  </Link>\n                </OverlayTrigger>\n                <OverlayTrigger\n                  placement=\"top\"\n                  overlay={<Tooltip id=\"\">Delete Chat</Tooltip>}\n                >\n                  <Link\n                    to=\"#\"\n                    className=\"text-reset font-19 py-1 px-2 d-inline-block\"\n                  >\n                    <i className=\"fe-trash-2\"></i>\n                  </Link>\n                </OverlayTrigger>\n              </div>\n            </Col>\n          </Row>\n        </Card.Body>\n        <Card.Body>\n          {loading && <Loader />}\n\n          <SimpleBar\n            style={{ height: \"465px\", width: \"100%\" }}\n            id=\"chatScrollBar\"\n          >\n            <ul\n              className=\"conversation-list\"\n            >\n              {(userMessages || []).map((message, index) => {\n                return (\n                  <UserMessage key={index} message={message} toUser={toUser} />\n                );\n              })}\n              <AlwaysScrollToBottom />\n            </ul>\n          </SimpleBar>\n\n          <Row>\n            <Col>\n              <div className=\"mt-3 bg-light p-3 rounded\">\n                <form\n                  noValidate\n                  name=\"chat-form\"\n                  id=\"chat-form\"\n                  onSubmit={handleSubmit(sendChatMessage)}\n                >\n                  <div className=\"row\">\n                    <div className=\"col mb-2 mb-sm-0\">\n                      <FormInput\n                        type=\"text\"\n                        name=\"newMessage\"\n                        className=\"border-0\"\n                        placeholder=\"Enter your text\"\n                        register={register}\n                        key=\"newMessage\"\n                        errors={errors}\n                        control={control}\n                      />\n                    </div>\n                    <div className=\"col-sm-auto\">\n                      <div className=\"btn-group\">\n                        <Link to=\"#\" className=\"btn btn-light\">\n                          <i className=\"fe-paperclip\"></i>\n                        </Link>\n                        <button\n                          type=\"submit\"\n                          className=\"btn btn-success chat-send w-100\"\n                        >\n                          <i className=\"fe-send\"></i>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </form>\n              </div>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default ChatArea;\n","import React, { useState } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\n// components\nimport PageTitle from \"../../../components/PageTitle\";\n\nimport ChatUsers from \"./ChatUsers\";\nimport ChatArea from \"./ChatArea\";\n// dummy data\nimport { users, ChatUser } from \"./data\";\n\n// ChatApp\nconst ChatApp = () => {\n  const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n  /**\n   * On user change\n   */\n  const onUserChange = (user: ChatUser) => {\n    setSelectedUser(user);\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Apps\", path: \"/apps/chat\" },\n          { label: \"Chat\", path: \"/apps/chat\", active: true },\n        ]}\n        title={\"Chat\"}\n      />\n\n      <Row>\n        <Col lg={4} xl={3}>\n          <ChatUsers onUserSelect={onUserChange} />\n        </Col>\n        <Col lg={8} xl={9}>\n          <ChatArea selectedUser={selectedUser} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ChatApp;\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","_objectSpread","key","PasswordInput","placeholder","refCallback","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_Fragment","_jsxs","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","rows","otherProps","_objectWithoutProperties","_excluded","comp","users","avatar","avatar2","lastMessage","totalUnread","lastMessageOn","email","phone","location","languages","groups","avatar5","avatar4","avatar6","avatar7","avatar8","avatar3","messages","defaultTo","avatar1","_i","_users","length","user","push","message","value","to","from","sendOn","file","size","onUserSelect","_toConsumableArray","setUser","_useState3","_useState4","selectedUser","setSelectedUser","Card","src","profilePic","height","alt","Link","onKeyUp","e","text","target","filter","u","toLowerCase","indexOf","Row","Col","SimpleBar","style","width","index","activateUser","classnames","UserMessage","toUser","odd","Dropdown","align","loading","setLoading","userMessages","setUserMessages","_useState5","getMessagesForUser","useCallback","setTimeout","m","useEffect","schemaResolver","yupResolver","yup","shape","newMessage","required","reset","sendChatMessage","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","values","newUserMessages","_context","prev","next","Date","getHours","getMinutes","otherNewMessages","stop","_x","apply","arguments","AlwaysScrollToBottom","elementRef","useRef","current","scrollIntoView","behavior","sm","OverlayTrigger","placement","overlay","Tooltip","Loader","FormInput","PageTitle","breadCrumbItems","path","active","title","lg","xl","ChatUsers","ChatArea"],"sourceRoot":""}