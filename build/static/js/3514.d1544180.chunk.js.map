{"version":3,"file":"static/js/3514.d1544180.chunk.js","mappings":"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","sources":["components/VerticalForm.tsx","components/FormInput.tsx","pages/auth2/ForgetPassword2.tsx"],"sourcesContent":["import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { useState, InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface PasswordInputProps {\n  name: string;\n  placeholder?: string;\n  refCallback?: any;\n  errors: FieldErrors;\n  control?: Control<any>;\n  register?: any;\n  className?: string;\n}\n\n/* Password Input */\nconst PasswordInput = ({\n  name,\n  placeholder,\n  refCallback,\n  errors,\n  control,\n  register,\n  className,\n}: PasswordInputProps) => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  return (\n    <>\n      <InputGroup className=\"mb-0\">\n        <Form.Control\n          type={showPassword ? \"text\" : \"password\"}\n          placeholder={placeholder}\n          name={name}\n          id={name}\n          as=\"input\"\n          ref={(r: HTMLInputElement) => {\n            if (refCallback) refCallback(r);\n          }}\n          className={className}\n          isInvalid={errors && errors[name] ? true : false}\n          {...(register ? register(name) : {})}\n          autoComplete={name}\n        />\n        <div\n          className={classNames(\"input-group-text\", \"input-group-password\", {\n            \"show-password\": showPassword,\n          })}\n          data-password={showPassword ? \"true\" : \"false\"}\n        >\n          <span\n            className=\"password-eye\"\n            onClick={() => {\n              setShowPassword(!showPassword);\n            }}\n          ></span>\n        </div>\n      </InputGroup>\n    </>\n  );\n};\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  type?: string;\n  name: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  refCallback?: any;\n  children?: any;\n  rows?: string;\n}\n\nconst FormInput = ({\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  refCallback,\n  children,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"password\" ? (\n            <>\n              <Form.Group className={containerClass}>\n                {label ? (\n                  <>\n                    {\" \"}\n                    <Form.Label className={labelClassName}>\n                      {label}\n                    </Form.Label>{\" \"}\n                    {children}{\" \"}\n                  </>\n                ) : null}\n                <PasswordInput\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors!}\n                  register={register}\n                  className={className}\n                />\n\n                {errors && errors[name] ? (\n                  <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name][\"message\"]}\n                  </Form.Control.Feedback>\n                ) : null}\n              </Form.Group>\n            </>\n          ) : (\n            <>\n              {type === \"checkbox\" || type === \"radio\" ? (\n                <>\n                  <Form.Group className={containerClass}>\n                    <Form.Check\n                      type={type}\n                      label={label}\n                      name={name}\n                      id={name}\n                      ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                      }}\n                      className={className}\n                      isInvalid={errors && errors[name] ? true : false}\n                      {...(register ? register(name) : {})}\n                      {...otherProps}\n                    />\n\n                    {errors && errors[name] ? (\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors[name][\"message\"]}\n                      </Form.Control.Feedback>\n                    ) : null}\n                  </Form.Group>\n                </>\n              ) : (\n                <Form.Group className={containerClass}>\n                  {label ? (\n                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                  ) : null}\n\n                  <Form.Control\n                    type={type}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as={comp}\n                    ref={(r: HTMLInputElement) => {\n                      if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    rows={rows}\n                    {...otherProps}\n                    autoComplete={name}\n                  >\n                    {children ? children : null}\n                  </Form.Control>\n\n                  {errors && errors[name] ? (\n                    <Form.Control.Feedback type=\"invalid\">\n                      {errors[name][\"message\"]}\n                    </Form.Control.Feedback>\n                  ) : null}\n                </Form.Group>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\n// actions\nimport { resetAuth, forgotPassword } from \"../../redux/actions\";\n\n// store\nimport { RootState, AppDispatch } from \"../../redux/store\";\n\n// components\nimport { VerticalForm, FormInput } from \"../../components\";\n\nimport AuthLayout from \"./AuthLayout\";\n\ninterface UserData {\n  username: string;\n}\n\n/* bottom links */\nconst BottomLink = () => {\n  const { t } = useTranslation();\n\n  return (\n    <footer className=\"footer footer-alt\">\n      <p className=\"text-muted\">\n        {t(\"Back to\")}{\" \"}\n        <Link to={\"/auth/login2\"} className=\"text-muted ms-1\">\n          <b>{t(\"Log in\")}</b>\n        </Link>\n      </p>\n    </footer>\n  );\n};\n\nconst ForgetPassword2 = () => {\n  const dispatch = useDispatch<AppDispatch>();\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    dispatch(resetAuth());\n  }, [dispatch]);\n\n  const { loading, passwordReset, resetPasswordSuccess, error } = useSelector(\n    (state: RootState) => ({\n      loading: state.Auth.loading,\n      resetPasswordSuccess: state.Auth.resetPasswordSuccess,\n      error: state.Auth.error,\n      passwordReset: state.Auth.passwordReset,\n    })\n  );\n\n  /*\n   * form validation schema\n   */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      username: yup.string().required(t(\"Please enter Username\")),\n    })\n  );\n\n  /*\n   * handle form submission\n   */\n  const onSubmit = (formData: UserData) => {\n    dispatch(forgotPassword(formData[\"username\"]));\n  };\n\n  return (\n    <>\n      <AuthLayout bottomLinks={<BottomLink />}>\n        <h4 className=\"mt-0\">{t(\"Recover Password\")}</h4>\n        <p className=\"text-muted mb-4\">\n          {t(\n            \"Enter your email address and we'll send you an email with instructions to reset your password\"\n          )}\n        </p>\n\n        {resetPasswordSuccess && (\n          <Alert variant=\"success\">{resetPasswordSuccess.message}</Alert>\n        )}\n\n        {error && (\n          <Alert variant=\"danger\" className=\"my-2\">\n            {error}\n          </Alert>\n        )}\n\n        {!passwordReset && (\n          <VerticalForm onSubmit={onSubmit} resolver={schemaResolver}>\n            <FormInput\n              label={t(\"Username\")}\n              type=\"text\"\n              name=\"username\"\n              placeholder={t(\"Enter your Username\")}\n              containerClass={\"mb-3\"}\n            />\n\n            <div className=\"mb-0 text-center d-grid\">\n              <Button variant=\"primary\" type=\"submit\" disabled={loading}>\n                {t(\"Reset Password\")}\n              </Button>\n            </div>\n          </VerticalForm>\n        )}\n      </AuthLayout>\n    </>\n  );\n};\n\nexport default ForgetPassword2;\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","_objectSpread","key","PasswordInput","placeholder","refCallback","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_Fragment","_jsxs","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","rows","otherProps","_objectWithoutProperties","_excluded","comp","BottomLink","t","useTranslation","Link","to","dispatch","useDispatch","useEffect","resetAuth","_useSelector","useSelector","state","loading","Auth","resetPasswordSuccess","error","passwordReset","schemaResolver","yupResolver","yup","shape","username","required","AuthLayout","bottomLinks","Alert","variant","message","VerticalForm","formData","forgotPassword","FormInput","Button","disabled"],"sourceRoot":""}