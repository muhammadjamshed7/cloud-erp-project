{"version":3,"file":"static/js/6547.6326887e.chunk.js","mappings":"wKA8CA,IA7BkB,SAACA,GACjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAAAC,UACFF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAAAD,UACFE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBH,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,OAAKK,UAAU,mBAAkBH,UAC/BE,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAACD,UAAU,MAAKH,SAAA,EACzBF,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,KAAe,CAACC,KAAK,IAAGL,SAAC,WAExBH,EAAuB,iBAAK,IAAIS,KAAI,SAACC,EAAMC,GAC3C,OAAOD,EAAKE,QACVX,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,KAAe,CAACK,QAAM,EAAAT,SACpBO,EAAKG,OADqBF,IAI7BV,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,KAAe,CAAaC,KAAME,EAAKI,KAAKX,SAC1CO,EAAKG,OADcF,EAI1B,UAGJV,EAAAA,EAAAA,KAAA,MAAIK,UAAU,aAAYH,SAAEH,EAAa,cAKnD,C,sJCyHA,UApJqB,WACnB,IAAAe,GAAwCC,EAAAA,EAAAA,UAA2B,CACjE,EAAG,CAAEC,UAAW,GAAIC,QAAS,IAC7B,EAAG,CAAED,UAAW,GAAIC,QAAS,MAC7BC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAHKM,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAIpCI,GAA4CP,EAAAA,EAAAA,UAA6B,CACvE,EAAG,QACH,EAAG,UACHQ,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAHKE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAKlCG,EAAU,SAAChB,EAAeiB,EAAcV,GAC5C,IAAIW,GAAcC,EAAAA,EAAAA,GAAA,GAAQT,GAC1BQ,EAAelB,GAAS,CACtBM,UAAWW,EAAM,GAAGG,QAAQ,GAC5Bb,QAASA,EAAQ,GAAGa,QAAQ,IAE9BT,EAAgBO,EAClB,EAEMG,EAAW,SAACrB,EAAeiB,GAC/B,IAAIK,GAAaH,EAAAA,EAAAA,GAAA,GAAQL,GACzBQ,EAActB,GAASiB,EAAM,GAAGG,QAAQ,GAAK,IAAMH,EAAM,GAAGG,QAAQ,GACpEL,EAAkBO,EACpB,EAEA,OACE5B,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAA/B,SAAA,EACEF,EAAAA,EAAAA,KAACkC,EAAAA,EAAS,CACRC,gBAAiB,CACf,CAAEvB,MAAO,cAAeC,KAAM,6BAC9B,CACED,MAAO,eACPC,KAAM,4BACNF,QAAQ,IAGZyB,MAAO,kBAGThC,EAAAA,EAAAA,MAACH,EAAAA,EAAG,CAAAC,SAAA,EACFF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACkC,GAAI,EAAEnC,UACTF,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAAApC,UACHE,EAAAA,EAAAA,MAACkC,EAAAA,EAAAA,KAAS,CAAApC,SAAA,EACRF,EAAAA,EAAAA,KAAA,MAAIK,UAAU,eAAcH,SAAC,YAC7BF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,qBAAoBH,SAAC,kCAElCF,EAAAA,EAAAA,KAACuC,IAAU,CACTC,MAAO,CAAEC,IAAK,EAAGC,IAAK,KACtBC,MAAO,CAAC,IACRC,SAAO,EACPlB,QAAS,SAACmB,EAAQC,EAAQnB,EAAOoB,EAAI9B,GAAO,OAC1CS,EAAQ,EAAGC,EAAOV,EAAQ,KAG9Bb,EAAAA,EAAAA,MAAA,KAAGC,UAAU,YAAWH,SAAA,CAAC,SAChB,IACNkB,GACChB,EAAAA,EAAAA,MAAA,QAAAF,SAAA,CACGkB,EAAa,GAAc,UAAE,SAC7BA,EAAa,GAAY,QAAE,OAE5B,gBAMZpB,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACkC,GAAI,EAAEnC,UACTF,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAAApC,UACHE,EAAAA,EAAAA,MAACkC,EAAAA,EAAAA,KAAS,CAAApC,SAAA,EACRF,EAAAA,EAAAA,KAAA,MAAIK,UAAU,eAAcH,SAAC,WAC7BF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,qBAAoBH,SAAC,iCAElCF,EAAAA,EAAAA,KAACuC,IAAU,CACTC,MAAO,CAAEC,IAAK,GAAIC,IAAK,KACvBC,MAAO,CAAC,GAAI,IACZC,SAAO,EACPlB,QAAS,SAACmB,EAAQC,EAAQnB,EAAOoB,EAAI9B,GAAO,OAC1Cc,EAAS,EAAGJ,EAAM,KAGtBvB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,YAAWH,SAAA,CAAC,SAChB,IACNsB,GAAiBxB,EAAAA,EAAAA,KAAA,QAAAE,SAAOsB,EAAe,KAAa,mBAO/DpB,EAAAA,EAAAA,MAACH,EAAAA,EAAG,CAAAC,SAAA,EACFF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACkC,GAAI,EAAEnC,UACTF,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAAApC,UACHE,EAAAA,EAAAA,MAACkC,EAAAA,EAAAA,KAAS,CAAApC,SAAA,EACRF,EAAAA,EAAAA,KAAA,MAAIK,UAAU,eAAcH,SAAC,iBAC7BF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,qBAAoBH,SAAC,4BAElCF,EAAAA,EAAAA,KAACuC,IAAU,CACTC,MAAO,CAAEC,IAAK,EAAGC,IAAK,KACtBC,MAAO,CAAC,IACRK,KAAM,GACNJ,SAAO,EACPlB,QAAS,SAACmB,EAAQC,EAAQnB,EAAOoB,EAAI9B,GAAO,OAC1CS,EAAQ,EAAGC,EAAOV,EAAQ,KAG9Bb,EAAAA,EAAAA,MAAA,KAAGC,UAAU,YAAWH,SAAA,CAAC,SAChB,IACNkB,GACChB,EAAAA,EAAAA,MAAA,QAAAF,SAAA,CACGkB,EAAa,GAAc,UAAE,SAC7BA,EAAa,GAAY,QAAE,OAE5B,gBAMZpB,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACkC,GAAI,EAAEnC,UACTF,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAAApC,UACHE,EAAAA,EAAAA,MAACkC,EAAAA,EAAAA,KAAS,CAAApC,SAAA,EACRF,EAAAA,EAAAA,KAAA,MAAIK,UAAU,eAAcH,SAAC,6BAC7BF,EAAAA,EAAAA,KAAA,KAAGK,UAAU,qBAAoBH,SAAC,uDAIlCF,EAAAA,EAAAA,KAACuC,IAAU,CACTC,MAAO,CAAEC,IAAK,GAAIC,IAAK,KACvBC,MAAO,CAAC,GAAI,IACZK,KAAM,GACNJ,SAAO,EACPlB,QAAS,SAACmB,EAAQC,EAAQnB,EAAOoB,EAAI9B,GAAO,OAC1Cc,EAAS,EAAGJ,EAAM,KAGtBvB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,YAAWH,SAAA,CAAC,SAChB,IACNsB,GAAiBxB,EAAAA,EAAAA,KAAA,QAAAE,SAAOsB,EAAe,KAAa,oBAQrE,C","sources":["components/PageTitle.tsx","pages/uikit/RangeSliders.tsx"],"sourcesContent":["import React from \"react\";\nimport { Row, Col, Breadcrumb } from \"react-bootstrap\";\n\ninterface BreadcrumbItems {\n  label: string;\n  path: string;\n  active?: boolean;\n}\n\ninterface PageTitleProps {\n  breadCrumbItems: Array<BreadcrumbItems>;\n  title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n  return (\n    <Row>\n      <Col>\n        <div className=\"page-title-box\">\n          <div className=\"page-title-right\">\n            <Breadcrumb className=\"m-0\">\n              <Breadcrumb.Item href=\"/\">UBold</Breadcrumb.Item>\n\n              {(props[\"breadCrumbItems\"] || []).map((item, index) => {\n                return item.active ? (\n                  <Breadcrumb.Item active key={index}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                ) : (\n                  <Breadcrumb.Item key={index} href={item.path}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                );\n              })}\n            </Breadcrumb>\n          </div>\n          <h4 className=\"page-title\">{props[\"title\"]}</h4>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PageTitle;\n","import React, { useState } from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport Nouislider from \"nouislider-react\";\nimport \"nouislider/distribute/nouislider.css\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\n\ninterface SelectedValsType {\n  [key: number]: { textValue: number; percent: number };\n}\n\ninterface SelectedRangesType {\n  [key: number]: string;\n}\n\n// RangeSliders\nconst RangeSliders = () => {\n  const [selectedVals, setSelectedVals] = useState<SelectedValsType>({\n    1: { textValue: 20, percent: 20 },\n    2: { textValue: 20, percent: 20 },\n  });\n  const [selectedRanges, setSelectedRanges] = useState<SelectedRangesType>({\n    1: \"20-45\",\n    2: \"20-45\",\n  });\n\n  const onSlide = (index: number, value: any[], percent: any) => {\n    let selectedValues = { ...selectedVals };\n    selectedValues[index] = {\n      textValue: value[0].toFixed(2),\n      percent: percent[0].toFixed(2),\n    };\n    setSelectedVals(selectedValues);\n  };\n\n  const onSlide2 = (index: number, value: any[]) => {\n    let selectedRange = { ...selectedRanges };\n    selectedRange[index] = value[0].toFixed(2) + \"-\" + value[1].toFixed(2);\n    setSelectedRanges(selectedRange);\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Extended UI\", path: \"/extended-ui/rangesliders\" },\n          {\n            label: \"Range Slider\",\n            path: \"/extended-ui/rangesliders\",\n            active: true,\n          },\n        ]}\n        title={\"Range Slider\"}\n      />\n\n      <Row>\n        <Col xl={6}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Single</h4>\n              <p className=\"text-muted font-14\">Slider with single selecrtor</p>\n\n              <Nouislider\n                range={{ min: 0, max: 100 }}\n                start={[20]}\n                connect\n                onSlide={(render, handle, value, un, percent) =>\n                  onSlide(1, value, percent)\n                }\n              />\n              <p className=\"mt-2 mb-0\">\n                Value:{\" \"}\n                {selectedVals ? (\n                  <span>\n                    {selectedVals[1][\"textValue\"]}, &nbsp;\n                    {selectedVals[1][\"percent\"]}%\n                  </span>\n                ) : null}\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col xl={6}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Range</h4>\n              <p className=\"text-muted font-14\">Slider with range selecrtor</p>\n\n              <Nouislider\n                range={{ min: 10, max: 150 }}\n                start={[20, 45]}\n                connect\n                onSlide={(render, handle, value, un, percent) =>\n                  onSlide2(1, value)\n                }\n              />\n              <p className=\"mt-2 mb-0\">\n                Value:{\" \"}\n                {selectedRanges ? <span>{selectedRanges[1]}</span> : null}\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xl={6}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Slider Step</h4>\n              <p className=\"text-muted font-14\">Slider with step value</p>\n\n              <Nouislider\n                range={{ min: 0, max: 100 }}\n                start={[20]}\n                step={10}\n                connect\n                onSlide={(render, handle, value, un, percent) =>\n                  onSlide(2, value, percent)\n                }\n              />\n              <p className=\"mt-2 mb-0\">\n                Value:{\" \"}\n                {selectedVals ? (\n                  <span>\n                    {selectedVals[2][\"textValue\"]}, &nbsp;\n                    {selectedVals[2][\"percent\"]}%\n                  </span>\n                ) : null}\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col xl={6}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Range Slider with Steps</h4>\n              <p className=\"text-muted font-14\">\n                Slider with range selecrtor with fixed step value\n              </p>\n\n              <Nouislider\n                range={{ min: 10, max: 150 }}\n                start={[20, 45]}\n                step={15}\n                connect\n                onSlide={(render, handle, value, un, percent) =>\n                  onSlide2(2, value)\n                }\n              />\n              <p className=\"mt-2 mb-0\">\n                Value:{\" \"}\n                {selectedRanges ? <span>{selectedRanges[2]}</span> : null}\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default RangeSliders;\n"],"names":["props","_jsx","Row","children","Col","_jsxs","className","Breadcrumb","href","map","item","index","active","label","path","_useState","useState","textValue","percent","_useState2","_slicedToArray","selectedVals","setSelectedVals","_useState3","_useState4","selectedRanges","setSelectedRanges","onSlide","value","selectedValues","_objectSpread","toFixed","onSlide2","selectedRange","_Fragment","PageTitle","breadCrumbItems","title","xl","Card","Nouislider","range","min","max","start","connect","render","handle","un","step"],"sourceRoot":""}